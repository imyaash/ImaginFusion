class Args(object):
    def __init__(
            self,
            posPrompt = "",
            negPrompt = "",
            expName = "df",
            workspace = "workspace",
            fp16 = False,
            seed = None,
            sdVersion = "2.1",
            hfModelKey = None,
            evalInterval = 1, # Number of training iterations between every evaluation on valid set
            testInterval = 100, # Number of training iterations between every test on test set
            guidanceScale = 100, # Guidance scale for stabel-diffusion
            saveMesh = True, # Whether to save the mesh
            mcubesResolution = 256, # Resolution for extracting mesh
            decimateTarget = 5e4, # Target for mesh decimation
            iters = 10000, # Number of iterations for training
            lr = 1e-3, # Max learning rate
            maxSteps = 1024, # Maximum number of steps sampled per ray
            updateExtraInterval = 16, # Iteration interval to update extra status
            latentIterRatio = 0.2,
            albedoIterRatio = 0,
            minAmbientRatio = 0.1,
            texturelessRatio = 0.2,
            jitterPose = True, # Adding jitter to randomlysampled camera poses
            jitterCentre = 0.2, # Amount of jitter to add to sampled camera pose's centre
            jitterTarget = 0.2, # Amount of jitter to add to sampled camera pose's target
            jitterUp = 0.02, # Amount of jitter to add to sampled camera pose's up-axis
            uniformSphereRate = 0, # Probability of sampling camera location uniformly
            gradClip = -1, # Clip grad for all gradients
            gradClipRGB = 1, # Clip grad of rgb space grad
            bgRadius = 1.4, # Radius of background sphere
            densityActivation = "exp", # density activation function ["exp", "softplus"]
            densityThresh = 10, # threshold for density grid to be occupied
            blobDensity = 5, # Max density for density blob
            blobRadius = 0.2, # Cantrolling the radius for density blob
            optim = "adan", # Optimisation function
            w = 64, # Render width for training NeRF
            h = 64, # Render height for training NeRF
            knownViewScale = 1.5, # multiply --h/w by this for known view rendering
            batchSize = 1, # Images to be rendered per batch
            bound = 1, # assume the scene is bounded in box(-bound, bound)x
            dtGamma = 0, # dt_gamma (>=0) for adaptive ray marching. set to 0 to disable, >0 to accelerate rendering (but usually with worse quality)
            minNear = 0.01, # Min near distance for camera
            radiusRange = [3.0, 3.5], # Training camera Radius Range
            thetaRange = [45, 105], # Training camera along the polar axis (up-down)
            phiRange = [-180, 180], # Training camera along the azimuth axis (left-right)
            fovyRange = [10, 30], # training camera fovy range
            defaultRadius = 3.2, # radius for default view
            defaultPolar = 90, # polar for default view
            defaultAzimuth = 0, # azimuth for default view
            defaultFovy = 20, # fovy for default view
            progressiveView = True, # progressively expand view sampling range from default to full
            progressiveViewInitRatio = 0.2, # initial ratio of final range
            progressiveLevel = True, # progressively increase gridencoder's max level
            angleOverhead = 30,
            angleFront = 60,
            tRange = [0.02, 0.98],
            dontOverrideTRange = True,
            lambdaEntropy = 1e-3, # loss scale for alpha entropy # should try 1e-4 # original 1e-3
            lambdaOpacity = 0, # loss scale for alpha value
            lambdaOrient = 1e-2, # loss scale for orientation
            lambdaGuidance = 1, # loss scale for guidance
            lambdaNormal = 0, # loss scale for normal map
            lambda2dNormalSmooth = 0, # loss scale for 2d normal image smoothness
            lambda3dNormalSmooth = 0, # loss scale for 2d normal image smoothness
            H = 800, # Mesh height for validation
            W = 800, # Mesh width for validation
            datasetSizeTrain = 100, # lenght of train dataset
            datasetSizeValid = 8, # frames to render in the turntable video in validation
            datasetSizeTest = 100, # frames to render in the turntable video in test time
            expStartIter = None, # start iter # for experiment, to calculate progressive_view and progressive_level
            expEndIter = None, # end iter # for experiment, to calculate progressive_view and progressive_level
            writeVideo = True, # write video at test
            emaDecay = 0.95, # Exponential moving average decay for training NeRF
            schedulerUpdateEveryStep = True, # Update scheduler every training step
    ):
        self.posPrompt = posPrompt
        self.negPrompt = negPrompt
        self.expName = expName
        self.workspace = workspace
        self.fp16 = fp16
        self.seed = seed
        self.sdVersion = sdVersion
        self.hfModelKey = hfModelKey
        self.evalInterval = evalInterval
        self.testInterval = testInterval
        self.guidanceScale = guidanceScale
        self.saveMesh = saveMesh
        self.mcubesResolution = mcubesResolution
        self.decimateTarget = decimateTarget
        self.iters = iters
        self.lr = lr
        self.maxSteps = maxSteps
        self.updateExtraInterval = updateExtraInterval
        self.latentIterRatio = latentIterRatio
        self.albedoIterRatio = albedoIterRatio
        self.minAmbientRatio = minAmbientRatio
        self.texturelessRatio = texturelessRatio
        self.jitterPose = jitterPose
        self.jitterCentre = jitterCentre
        self.jitterTarget = jitterTarget
        self.jitterUp = jitterUp
        self.uniformSphereRate = uniformSphereRate
        self.gradClip = gradClip
        self.gradClipRGB = gradClipRGB
        self.bgRadius = bgRadius
        self.densityActivation = densityActivation
        self.densityThresh = densityThresh
        self.blobDensity = blobDensity
        self.blobRadius = blobRadius
        self.optim = optim
        self.w = w
        self.h = h
        self.knownViewScale = knownViewScale
        self.batchSize = batchSize
        self.bound = bound
        self.dtGamma = dtGamma
        self.minNear = minNear
        self.radiusRange = radiusRange
        self.thetaRange = thetaRange
        self.phiRange = phiRange
        self.fovyRange = fovyRange
        self.defaultRadius = defaultRadius
        self.defaultPolar = defaultPolar
        self.defaultAzimuth = defaultAzimuth
        self.defaultFovy = defaultFovy
        self.progressiveView = progressiveView
        self.progressiveViewInitRatio = progressiveViewInitRatio
        self.progressiveLevel = progressiveLevel
        self.angleOverhead = angleOverhead
        self.angleFront = angleFront
        self.tRange = tRange
        self.dontOverrideTRange = dontOverrideTRange
        self.lambdaEntropy = lambdaEntropy
        self.lambdaOpacity = lambdaOpacity
        self.lambdaOrient = lambdaOrient
        self.lambdaGuidance = lambdaGuidance
        self.lambdaNormal = lambdaNormal
        self.lambda2dNormalSmooth = lambda2dNormalSmooth
        self.lambda3dNormalSmooth = lambda3dNormalSmooth
        self.H = H
        self.W = W
        self.datasetSizeTrain = datasetSizeTrain
        self.datasetSizeValid = datasetSizeValid
        self.datasetSizeTest = datasetSizeTest
        self.expStartIter = expStartIter
        self.expEndIter = expEndIter
        self.writeVideo = writeVideo
        self.emaDecay = emaDecay
        self.schedulerUpdateEveryStep = schedulerUpdateEveryStep
        self.refRadii = []
        self.refPolars = []
        self.refAzimuths = []